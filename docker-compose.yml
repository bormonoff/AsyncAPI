version: '3'
services:
  api:
    build:
      context: .
      dockerfile: docker/api/dev/Dockerfile
    env_file:
      - .env
    expose:
      - "8000"
    depends_on:
      - db
      - elasticsearch
    networks:
      - async_api_network

  etl:
    build:
      context: .
      dockerfile: docker/etl/Dockerfile
    env_file:
      - .env
    depends_on:
      - db
      - elasticsearch
#    volumes:
#      - ./etl/state.json:/app/state.json
    networks:
      - async_api_network

  db:
    image: postgres:16-alpine
    hostname: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    expose:
      - "${POSTGRES_PORT}"
    networks:
      - async_api_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 50s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.6.2
    env_file:
      - .env
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    expose:
      - "${ELASTIC_PORT}"
    networks:
      - async_api_network

  redis:
    image: redis:7-alpine
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    command:
      - /var/lib/redis/redis.conf
    restart: always
    volumes:
      - ./redis.conf:/var/lib/redis/redis.conf:ro
      - redis_data:/data
      - redis_socket:/redis_socket
    expose:
      - "6379"
    networks:
      - async_api_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1m20s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:1.25.3
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx:/etc/nginx/conf.d:ro
    depends_on:
      - api
    networks:
      - async_api_network
    ports:
      - "80:80"

networks:
  async_api_network:

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:
  redis_socket:
